# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Log_pb2 as Log__pb2


class LogServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Log = channel.unary_unary(
        '/LogService/Log',
        request_serializer=Log__pb2.LogRequest.SerializeToString,
        response_deserializer=Log__pb2.LogResponse.FromString,
        )
    self.GetLog = channel.unary_unary(
        '/LogService/GetLog',
        request_serializer=Log__pb2.GetLogRequest.SerializeToString,
        response_deserializer=Log__pb2.GetLogResponse.FromString,
        )


class LogServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Log(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLog(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LogServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Log': grpc.unary_unary_rpc_method_handler(
          servicer.Log,
          request_deserializer=Log__pb2.LogRequest.FromString,
          response_serializer=Log__pb2.LogResponse.SerializeToString,
      ),
      'GetLog': grpc.unary_unary_rpc_method_handler(
          servicer.GetLog,
          request_deserializer=Log__pb2.GetLogRequest.FromString,
          response_serializer=Log__pb2.GetLogResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'LogService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
